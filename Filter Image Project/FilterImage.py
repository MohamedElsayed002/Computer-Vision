# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PyQt5Project.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import cv2
from PyQt5.QtGui import QImage
from PyQt5.QtWidgets import QFileDialog, QMainWindow, QApplication, QWidget, QPushButton, QLabel, QVBoxLayout, QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1267, 640)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.openbtn1 = QtWidgets.QPushButton(self.centralwidget)
        self.openbtn1.setGeometry(QtCore.QRect(40, 250, 211, 41))
        self.openbtn1.setObjectName("openbtn1")
        self.medianBtn3 = QtWidgets.QPushButton(self.centralwidget)
        self.medianBtn3.setGeometry(QtCore.QRect(650, 250, 211, 41))
        self.medianBtn3.setObjectName("medianBtn3")
        self.cannyBtn2 = QtWidgets.QPushButton(self.centralwidget)
        self.cannyBtn2.setGeometry(QtCore.QRect(320, 250, 231, 41))
        self.cannyBtn2.setObjectName("cannyBtn2")
        self.labelImg1 = QtWidgets.QLabel(self.centralwidget)
        self.labelImg1.setEnabled(True)
        self.labelImg1.setGeometry(QtCore.QRect(30, 40, 251, 201))
        self.labelImg1.setAutoFillBackground(False)
        self.labelImg1.setText("")
        self.labelImg1.setPixmap(QtGui.QPixmap("WhatsApp Image 2024-07-02 at 13.11.48_40fbe538.jpg"))
        self.labelImg1.setScaledContents(True)
        self.labelImg1.setOpenExternalLinks(False)
        self.labelImg1.setObjectName("labelImg1")
        self.labelImg2 = QtWidgets.QLabel(self.centralwidget)
        self.labelImg2.setGeometry(QtCore.QRect(300, 50, 261, 181))
        self.labelImg2.setText("")
        self.labelImg2.setPixmap(QtGui.QPixmap("WhatsApp Image 2024-07-02 at 13.12.09_3ab2a65f.jpg"))
        self.labelImg2.setScaledContents(True)
        self.labelImg2.setObjectName("labelImg2")
        self.labelImg3 = QtWidgets.QLabel(self.centralwidget)
        self.labelImg3.setGeometry(QtCore.QRect(620, 30, 271, 201))
        self.labelImg3.setText("")
        self.labelImg3.setPixmap(QtGui.QPixmap("camera.jpg"))
        self.labelImg3.setScaledContents(True)
        self.labelImg3.setObjectName("labelImg3")
        self.noiseFilterbtn4 = QtWidgets.QPushButton(self.centralwidget)
        self.noiseFilterbtn4.setGeometry(QtCore.QRect(50, 520, 211, 41))
        self.noiseFilterbtn4.setObjectName("noiseFilterbtn4")
        self.removeFilterImg4 = QtWidgets.QLabel(self.centralwidget)
        self.removeFilterImg4.setEnabled(True)
        self.removeFilterImg4.setGeometry(QtCore.QRect(30, 310, 251, 201))
        self.removeFilterImg4.setAutoFillBackground(False)
        self.removeFilterImg4.setText("")
        self.removeFilterImg4.setPixmap(QtGui.QPixmap("WhatsApp Image 2024-07-02 at 13.11.48_40fbe538.jpg"))
        self.removeFilterImg4.setScaledContents(True)
        self.removeFilterImg4.setOpenExternalLinks(False)
        self.removeFilterImg4.setObjectName("removeFilterImg4")
        self.OstuImg5 = QtWidgets.QLabel(self.centralwidget)
        self.OstuImg5.setEnabled(True)
        self.OstuImg5.setGeometry(QtCore.QRect(320, 310, 251, 201))
        self.OstuImg5.setAutoFillBackground(False)
        self.OstuImg5.setText("")
        self.OstuImg5.setPixmap(QtGui.QPixmap("WhatsApp Image 2024-07-02 at 13.11.48_40fbe538.jpg"))
        self.OstuImg5.setScaledContents(True)
        self.OstuImg5.setOpenExternalLinks(False)
        self.OstuImg5.setObjectName("OstuImg5")
        self.OstuBtn5 = QtWidgets.QPushButton(self.centralwidget)
        self.OstuBtn5.setGeometry(QtCore.QRect(340, 520, 211, 41))
        self.OstuBtn5.setObjectName("OstuBtn5")
        self.HarrisImg = QtWidgets.QLabel(self.centralwidget)
        self.HarrisImg.setEnabled(True)
        self.HarrisImg.setGeometry(QtCore.QRect(630, 310, 251, 201))
        self.HarrisImg.setAutoFillBackground(False)
        self.HarrisImg.setText("")
        self.HarrisImg.setPixmap(QtGui.QPixmap("WhatsApp Image 2024-07-02 at 13.11.48_40fbe538.jpg"))
        self.HarrisImg.setScaledContents(True)
        self.HarrisImg.setOpenExternalLinks(False)
        self.HarrisImg.setObjectName("HarrisImg")
        self.HarrisBtn6 = QtWidgets.QPushButton(self.centralwidget)
        self.HarrisBtn6.setGeometry(QtCore.QRect(650, 520, 211, 41))
        self.HarrisBtn6.setObjectName("HarrisBtn6")
        self.sift_label_7 = QtWidgets.QLabel(self.centralwidget)
        self.sift_label_7.setGeometry(QtCore.QRect(920, 20, 241, 211))
        self.sift_label_7.setText("")
        self.sift_label_7.setPixmap(QtGui.QPixmap("camera.jpg"))
        self.sift_label_7.setScaledContents(True)
        self.sift_label_7.setObjectName("sift_label_7")
        self.SIFTButton7 = QtWidgets.QPushButton(self.centralwidget)
        self.SIFTButton7.setGeometry(QtCore.QRect(930, 250, 211, 41))
        self.SIFTButton7.setObjectName("SIFTButton7")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1267, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.openbtn1.clicked.connect(self.open_image)
        self.cannyBtn2.clicked.connect(self.canny)
        self.medianBtn3.clicked.connect(self.median_filter)
        self.noiseFilterbtn4.clicked.connect(self.noise_filter)
        self.OstuBtn5.clicked.connect(self.Otsu_func)
        self.HarrisBtn6.clicked.connect(self.harris_corner_detector)
        self.SIFTButton7.clicked.connect(self.sift_detector)
        self.image_path = None
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.openbtn1.setText(_translate("MainWindow", "Open Image"))
        self.medianBtn3.setText(_translate("MainWindow", "Apply Median Filter"))
        self.cannyBtn2.setText(_translate("MainWindow", "Apply Canny"))
        self.noiseFilterbtn4.setText(_translate("MainWindow", "Remove Noise and Filter "))
        self.OstuBtn5.setText(_translate("MainWindow", "Ostu Method "))
        self.HarrisBtn6.setText(_translate("MainWindow", "Harris Corner"))
        self.SIFTButton7.setText(_translate("MainWindow", "SIFT Detector"))



    def show_error_message(self,message):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.warning)
        msg.setText(message)
        msg.setWindowTitle('Error')
        msg.exec_()


    def open_image(self):
        file_name, _ = QFileDialog.getOpenFileName(None, "Open Image", "",
                                                   "Image Files (*.png *.jpg *.bmp *.jpeg)")
        

        if file_name:
            self.image_path = file_name
            pixmap = QtGui.QPixmap(file_name)
            self.labelImg1.setPixmap(pixmap.scaled(self.labelImg1.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))

    def canny(self):
        if not  self.image_path:
            self.show_error_message("No image selected")
            return
        
        img = cv2.imread(self.image_path, cv2.IMREAD_GRAYSCALE)  # Read the image in grayscale
        img_canny = cv2.Canny(img, 100, 200)  # Apply Canny edge detection
        # Convert the image to a format suitable for QPixmap
        height, width = img_canny.shape
        bytes_per_line = width
        q_img = QImage(img_canny.data, width, height, bytes_per_line, QImage.Format_Grayscale8)
        pixmap = QtGui.QPixmap.fromImage(q_img)
        self.labelImg2.setPixmap(pixmap.scaled(self.labelImg2.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))


    def median_filter(self):
        if self.image_path:
            img = cv2.imread(self.image_path)  # Read the image in color
            img_median = cv2.medianBlur(img, 5)  # Apply Median filter with kernel size 5
            # Convert the image to a format suitable for QPixmap
            height, width, channel = img_median.shape
            bytes_per_line = 3 * width
            q_img = QImage(img_median.data, width, height, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
            pixmap = QtGui.QPixmap.fromImage(q_img)
            self.labelImg3.setPixmap(pixmap.scaled(self.labelImg3.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        else:
            print("No image selected")
    def noise_filter(self):

        if self.image_path:
            img = cv2.imread(self.image_path)
            img_median = cv2.medianBlur(img,5)
            img_canny = cv2.Canny(img_median,100,200)
            height , width = img_canny.shape 
            bytes_per_line = width
            q_img = QImage(img_canny.data, width, height, bytes_per_line, QImage.Format_Grayscale8)
            pixmap = QtGui.QPixmap.fromImage(q_img)
            self.removeFilterImg4.setPixmap(pixmap.scaled(self.removeFilterImg4.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        
        else:
            print('df')

    def Otsu_func(self):
        if self.image_path:
            img = cv2.imread(self.image_path, cv2.IMREAD_GRAYSCALE)  # Read the image in grayscale
            _, img_otsu = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)  # Apply Otsu's thresholding

            # Convert the image to a format suitable for QPixmap
            height, width = img_otsu.shape
            bytes_per_line = width
            q_img = QImage(img_otsu.data, width, height, bytes_per_line, QImage.Format_Grayscale8)
            pixmap = QtGui.QPixmap.fromImage(q_img)
            self.OstuImg5.setPixmap(pixmap.scaled(self.OstuImg5.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        else:
            print("No image selected")

    def harris_corner_detector(self):
        if self.image_path:
            img = cv2.imread(self.image_path)  # Read the image in color
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # Convert to grayscale
            gray = cv2.cornerHarris(cv2.normalize(gray.astype('float32'), None, 0, 255, cv2.NORM_MINMAX), 2, 3, 0.04)  # Harris corner detection
            img[gray > 0.01 * gray.max()] = [0, 0, 255]  # Mark corners in red

            # Convert the image to a format suitable for QPixmap
            height, width, channel = img.shape
            bytes_per_line = 3 * width
            q_img = QImage(img.data, width, height, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
            pixmap = QtGui.QPixmap.fromImage(q_img)
            self.HarrisImg.setPixmap(pixmap.scaled(self.HarrisImg.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        else:
            print("No image selected")

    def sift_detector(self):
        if self.image_path:
            img = cv2.imread(self.image_path)  # Read the image in color
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            sift = cv2.SIFT_create()  # Create SIFT detector
            keypoints, descriptors = sift.detectAndCompute(gray, None)
            img_sift = cv2.drawKeypoints(gray, keypoints, img)

            # Convert the image to a format suitable for QPixmap
            height, width, channel = img_sift.shape
            bytes_per_line = 3 * width
            q_img = QImage(img_sift.data, width, height, bytes_per_line, QImage.Format_RGB888).rgbSwapped()
            pixmap = QtGui.QPixmap.fromImage(q_img)
            self.sift_label_7.setPixmap(pixmap.scaled(self.sift_label_7.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        else:
            print("No image selected")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
